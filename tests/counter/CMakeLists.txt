SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)

EXECUTE_PROCESS(
    COMMAND bash -c "find ${CMAKE_SOURCE_DIR}/../.. -type d -path \"*output/include/braft\" | xargs dirname | xargs dirname | tr -d '\n'"
    OUTPUT_VARIABLE OUTPUT_PATH
)

SET(CMAKE_PREFIX_PATH ${OUTPUT_PATH})

INCLUDE(FindThreads)
INCLUDE(FindProtobuf)
MESSAGE(STATUS ${PROTOBUF_PROTOC_EXECUTABLE})
IF (NOT PROTOBUF_PROTOC_EXECUTABLE)
    GET_FILENAME_COMPONENT(PROTO_LIB_DIR ${PROTOBUF_LIBRARY} DIRECTORY) 
    SET(PROTOBUF_PROTOC_EXECUTABLE "${PROTO_LIB_DIR}/../bin/protoc")
ENDIF()

# protobuf_generate_cpp(PROTO_SRC PROTO_HEADER counter.proto)
FILE(GLOB PROTO_FILES ${CMAKE_CURRENT_BINARY_DIR}/*.proto)
MESSAGE("protoc: ${PROTOBUF_PROTOC_EXECUTABLE}, proto inc: ${PROTOBUF_INCLUDE_DIRS}, lib: ${PROTOBUF_LIBRARIES}, ${PROTOBUF_PROTOC_LIBRARY}, protos: ${PROTO_FILES}")
FILE(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
FOREACH (PROTO ${PROTO_FILES})
    MESSAGE(proto : ${PROTO})
    GET_FILENAME_COMPONENT(PROTO_WE ${PROTO} NAME)
    STRING(REPLACE ".proto" "" PROTO_WE ${PROTO_WE})
    LIST(APPEND PROTO_HDRS "${CMAKE_CURRENT_BINARY_DIR}/${PROTO_WE}.pb.h")
    LIST(APPEND PROTO_SRCS "${CMAKE_CURRENT_BINARY_DIR}/${PROTO_WE}.pb.cc")
    ADD_CUSTOM_COMMAND(
            OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${PROTO_WE}.pb.h ${CMAKE_CURRENT_BINARY_DIR}/${PROTO_WE}.pb.cc
            COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
            --cpp_out=${CMAKE_CURRENT_BINARY_DIR}
            --proto_path=${PROTOBUF_INCLUDE_DIR}
            --proto_path=${CMAKE_CURRENT_BINARY_DIR} ${PROTO}
            DEPENDS protobuf
    )
ENDFOREACH ()

# include PROTO_HEADER
MESSAGE("${CMAKE_CURRENT_BINARY_DIR}")
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
INCLUDE_DIRECTORIES(${BRPC_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${BRAFT_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${GFLAGS_INCLUDE_PATH})
INCLUDE_DIRECTORIES(${LEVELDB_INCLUDE_PATH})

AUX_SOURCE_DIRECTORY(. COUNTER_SRC)
LIST(APPEND COUNTER_SRC ${PROTO_HDRS} ${PROTO_SRCS})
ADD_LIBRARY(counter ${COUNTER_SRC})
ADD_DEPENDENCIES(counter gflags protobuf leveldb braft brpc ssl crypto)

EXECUTE_PROCESS(
    COMMAND bash -c "grep \"namespace [_A-Za-z0-9]\\+ {\" ${GFLAGS_INCLUDE_PATH}/gflags/gflags_declare.h | head -1 | awk '{print $2}' | tr -d '\n'"
    OUTPUT_VARIABLE GFLAGS_NS
)
IF (${GFLAGS_NS} STREQUAL "GFLAGS_NAMESPACE")
    EXECUTE_PROCESS(
        COMMAND bash -c "grep \"#define GFLAGS_NAMESPACE [_A-Za-z0-9]\\+\" ${GFLAGS_INCLUDE_PATH}/gflags/gflags_declare.h | head -1 | awk '{print $3}' | tr -d '\n'"
        OUTPUT_VARIABLE GFLAGS_NS
    )
ENDIF ()

SET(DYNAMIC_LIB
    ${CMAKE_THREAD_LIBS_INIT}
    ${GFLAGS_LIB}
    ${PROTOBUF_LIBRARY}
    ${LEVELDB_LIB}
    ${BRAFT_LIBRARIES}
    ${BRPC_LIBRARIES}
    rt
    ssl
    crypto
    dl
    z
    )

TARGET_LINK_LIBRARIES(counter
                      "-Xlinker \"-(\""
                      ${DYNAMIC_LIB}
                      "-Xlinker \"-)\"")

